mixin storeForm(store = {})
    // if we are rendering this template for the add screen it will fall back to
    // the empty store
    // action tells browser where to send data
    // method tells method how to send method
    form(action=`/add/${store._id || ''}` method="POST" class="card" enctype="multipart/form-data")
        // names here have to match what is in schema
        // slug auto generated
        Label(for="name") Name
        // if we are editing a store this will show the name of the store
        input(type="text" name="name" value=store.name)
        label(for="description") Description
        textarea(name="description")= store.description
        // image upload
        // even though someone could remove the 'accept' attribute with dev tools
        // multer middleware will make sure this isn't uploaded if not an image
        label(for="photo") Photo
            input(type="file" name="photo" id="photo" accept="image/gif, image/png, image/jpeg")
            if store.photo
                img(src=`/uploads/${store.photo}`, alt=store.name width=200)
        // address, lng and lat
        label(for="address") Address
        // see how in app.js bodyParser with extended: true allows us
        // to use properties of nested data this. Means dont
        // have to do any extra heavy lifting on client or server
        input(type="text" id="address" name="location[address]" value=(store.location && store.location.address))
        label(for="lng") Address Lng
        // required attribute adds client-side validation to make sure that people put this in
        input(type="text" id="lng" name="location[coordinates][0]" value=(store.location && store.location.coordinates[0]) required)
        label(for="lng") Address Lat
        input(type="text" id="lat" name="location[coordinates][1]" value=(store.location && store.location.coordinates[1]) required)
        //pre= h.dump(store)

        // Run some JS to loop over array of tags
        - const choices = [ 'Wifi', 'Open Late', 'Family Friendly', 'Vegetarian', 'Licensed' ]
        - const tags = store.tags || []
        ul.tags
            each choice in choices
                .tag.tag__choice
                    input(type="checkbox" id=choice, value=choice, name="tags" checked=(tags.includes(choice)))
                    label(for=choice) #{choice}
        input(type="submit" value="Save â†’" class="button")
